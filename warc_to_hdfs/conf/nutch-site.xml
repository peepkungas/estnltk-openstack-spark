<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Put site-specific property overrides in this file. -->

<configuration>

<property>
  <name>plugin.includes</name>
  <!-- Add 'index-nutchwax' and 'query-nutchwax' to plugin list. -->
  <!-- Also, add 'parse-pdf' -->
  <!-- Remove 'urlfilter-regex' and 'normalizer-(pass|regex|basic)' -->
  <value>protocol-http|parse-(text|html|warc-to-hdfs)|index-(nutchwax)|query-(basic|nutchwax)|summary-basic|scoring-nutchwax</value>
</property>

<!-- 
  When using *only* the 'index-nutchwax' in 'plugin.includes' above, 
  we don't need to specify an order since there is only one plugin.

  However, if you choose to use the Nutch 'index-basic', then you have
  to specify the order such that the NutchWAX ConfigurableIndexingFilter
  is after it.  Whichever plugin comes last over-writes the values
  of those that come before it.

<property>
  <name>indexingfilter.order</name>
  <value>
    org.apache.nutch.indexer.basic.BasicIndexingFilter
    org.archive.nutchwax.index.ConfigurableIndexingFilter
  </value>
</property>
  -->

<property>
  <!-- Configure the 'index-nutchwax' plugin.  Specify how the metadata fields added by the Importer are mapped to the Lucene documents during indexing.
       The specifications here are of the form "src-key:lowercase:store:index:dest-key"
       Where the only required part is the "src-key", the rest will assume the following defaults:
          lowercase = true
          store     = true
          index     = tokenized
          exclusive = true
          dest-key  = src-key
    -->
  <name>nutchwax.filter.index</name>
  <value>
    title:false:true:tokenized
    content:false:compress:tokenized
    site:false:false:untokenized

    url:false:true:tokenized
    digest:false:true:no

    collection:true:true:no_norms
    date:true:true:no_norms
    type:true:true:no_norms
    length:false:true:no
  </value>
</property>

<property>
  <!-- Configure the 'query-nutchwax' plugin.  Specify which fields to make searchable via "field:[term|phrase]" query syntax, and whether they are "raw" fields or not.  
       The specification format is one of:
          field:<name>:<boost>
          raw:<name>:<lowercase>:<boost>
          group:<name>:<lowercase>:<delimiter>:<boost>
       Default values are
          lowercase = true
          delimiter = ","
          boost     = 1.0f
       -->
  <!-- We do *not* use this filter for handling "date" queries, there is a specific filter for that: DateQueryFilter -->
  <name>nutchwax.filter.query</name>
  <value>
    group:collection
    group:site:false
    group:type
    field:content
    field:title
  </value>
</property>

<!-- Over-ride setting in Nutch "nutch-default.xml" file.  We do *not* want Content-Type detection via magic resolution because the implementation 
     in Nutch reads in the entire content body (which could be a 1GB MPG movie), then converts it to a String before examining the first dozen or
     so bytes/characters for magic matching.  Since we archvie large files, this is bad, and OOMs occur.  So, we disable this feature and keep
     the Content-Type that is already in the (W)ARC file. -->
<property>
  <name>mime.type.magic</name>
  <value>false</value>
  <description>Defines if the mime content type detector uses magic resolution.</description>
</property>

<!-- Normally, this is specified on the command line with the NutchWAX
     Importer is invoked.  It can be specified here if the user
     prefers.
  -->
<property>
  <name>nutchwax.urlfilter.wayback.exclusions</name>
  <value></value>
  <description>Path to file containing list of exclusions.</description>
</property>

<!-- For CDX-based de-duplication to work properly, you must use the
     same Wayback URLCanonicalizer that is used by the "(w)arc-indexer"
     utility.  By default, this is AggressiveUrlCanonicalizer, but
     could by IdentityCanonicalizer if you use the "-i" (identity) option
     with "(w)arc-indexer".
  -->
<property>
  <name>nutchwax.urlfilter.wayback.canonicalizer</name>
  <value>org.archive.wayback.util.url.AggressiveUrlCanonicalizer</value>
  <description>Implementation of URL canonicalizer to use.</description>
</property>

<!-- Only pass URLs with an HTTP status in this range.  Used by the
     NutchWAX importer.
   -->
<property>
  <name>nutchwax.filter.http.status</name>
  <value>
    200-299
  </value>
</property>

<!-- Similar to Nutch's
       file.content.limit
       http.content.limit
       ftp.content.limit
     properties, this specifies a limit on the size of a document
     imported via NutchWAX.
  -->
<property>
  <name>nutchwax.import.content.limit</name>
  <value>1048576</value>
</property>

<!-- Whether or not we store the full content in the segment's
     "content" directory.  Most NutchWAX users are also using Wayback
     to serve the archived content, so there's no need for NutchWAX to
     keep a "cached" copy as well.

     Setting to 'true' yields the same bahavior as in previous
     versions of NutchWAX, and as in Nutch.  The content is stored in
     the segment's "content" directory.

     Setting to 'false' results in an empty "content" directory in the
     segment.  The content is not stored.
     
     Default value is 'false'.
  -->
<property>
  <name>nutchwax.import.store.content</name>
  <value>false</value>
</property>

<!-- Enable per-collection segment sub-dirs, e.g.
       segments/<collectionId>/segment1
                              /segment2
                              ...
  -->
<property>
  <name>nutchwax.FetchedSegments.perCollection</name>
  <value>false</value>
</property>

<!-- The following are over-rides of property values in
     nutch-default which the Internet Archive uses in
     most NutchWAX projects. -->
<property>
  <name>io.map.index.skip</name>
  <value>32</value>
</property>

<property>
  <name>searcher.summary.context</name>
  <value>8</value>
</property>

<property>
  <name>searcher.summary.length</name>
  <value>80</value>
</property>

<property>
  <name>searcher.fieldcache</name>
  <value>false</value>
</property>



</configuration>

